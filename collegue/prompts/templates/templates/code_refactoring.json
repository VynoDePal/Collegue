{
  "id": "code_refactoring",
  "name": "Refactoring de code",
  "description": "Refactore et améliore un extrait de code existant",
  "template": "Refactore le code suivant pour l'améliorer selon les objectifs spécifiés :\n\n```{language}\n{code}\n```\n\nObjectifs du refactoring :\n{objectives}\n\nContraintes à respecter :\n{constraints}\n\nFournis le code refactoré avec des commentaires expliquant les changements importants.",
  "variables": [
    {
      "name": "language",
      "description": "Langage de programmation du code",
      "type": "string",
      "required": true,
      "default": null,
      "options": null,
      "example": "python"
    },
    {
      "name": "code",
      "description": "Code source à refactorer",
      "type": "code",
      "required": true,
      "default": null,
      "options": null,
      "example": "def process(data):\n    result = []\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            result.append(data[i] * 2)\n        else:\n            result.append(data[i] * 3)\n    return result"
    },
    {
      "name": "objectives",
      "description": "Objectifs du refactoring",
      "type": "string",
      "required": true,
      "default": null,
      "options": null,
      "example": "- Améliorer la lisibilité\n- Optimiser les performances\n- Utiliser des approches fonctionnelles"
    },
    {
      "name": "constraints",
      "description": "Contraintes à respecter pendant le refactoring",
      "type": "string",
      "required": false,
      "default": "- Conserver la même fonctionnalité\n- Maintenir la compatibilité avec l'API existante",
      "options": null,
      "example": "- Conserver la signature de la fonction\n- Ne pas utiliser de bibliothèques externes"
    }
  ],
  "category": "refactoring",
  "tags": [
    "refactoring",
    "optimization",
    "code_improvement"
  ],
  "provider_specific": {
    "openai": "En tant qu'expert en développement logiciel et refactoring, améliore le code suivant selon les objectifs spécifiés :\n\n```{language}\n{code}\n```\n\nObjectifs du refactoring :\n{objectives}\n\nContraintes à respecter :\n{constraints}\n\nFournis le code refactoré avec des commentaires expliquant les changements importants et les raisons de ces changements. Assure-toi que le code reste fonctionnel et conforme aux bonnes pratiques du langage {language}."
  },
  "examples": [
    {
      "language": "python",
      "code": "def process(data):\n    result = []\n    for i in range(len(data)):\n        if data[i] % 2 == 0:\n            result.append(data[i] * 2)\n        else:\n            result.append(data[i] * 3)\n    return result",
      "objectives": "- Améliorer la lisibilité\n- Optimiser les performances\n- Utiliser des approches fonctionnelles",
      "constraints": "- Conserver la signature de la fonction\n- Ne pas utiliser de bibliothèques externes"
    }
  ],
  "created_at": "2025-06-11T18:17:52.285229",
  "updated_at": "2025-06-11T18:17:52.285238",
  "created_by": null,
  "is_public": true,
  "version": "1.0.0"
}